/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}html{font-family:Roboto,sans-serif;background-color:#3b042c;background:-webkit-gradient(linear,left bottom,right top,color-stop(30%,#3b042c),color-stop(60%,#9d2139),color-stop(90%,#e6510f)) no-repeat center center fixed;background:linear-gradient(to top right,#3b042c 30%,#9d2139 60%,#e6510f 90%) no-repeat center center fixed;background-repeat:no-repeat;background-size:cover}@media screen and (min-width:600px){html{background:url(../img/beaver-large.jpg) no-repeat center center fixed;background-repeat:no-repeat;background-size:cover}}li,p,ul{margin:0;padding:0}.preloader{z-index:3;position:fixed;top:0;width:100%;height:100vh;background-color:#2b001e;-webkit-transition:opacity ease-out .5s;transition:opacity ease-out .5s}.preloader .wrapper{position:absolute;width:12rem;left:0;right:0;top:5rem;bottom:17rem;margin-left:auto;margin-right:auto}.preloader .wrapper .intro{color:#fff;font-size:3rem;display:block;margin:2rem .7rem}.preloader .wrapper .orbs{display:-webkit-box;display:flex;-webkit-box-pack:justify;justify-content:space-between}.preloader .wrapper .orbs .orb{display:block;width:5px;height:5px;background-color:#fff;border-radius:50px;-webkit-animation:load 10s infinite 0s;animation:load 10s infinite 0s}.preloader .wrapper .orbs .orb:nth-of-type(2){-webkit-animation:load 10s infinite 1s;animation:load 10s infinite 1s}.preloader .wrapper .orbs .orb:nth-of-type(3){-webkit-animation:load 10s infinite 2s;animation:load 10s infinite 2s}.preloader .wrapper .orbs .orb:nth-of-type(4){-webkit-animation:load 10s infinite 3s;animation:load 10s infinite 3s}.preloader .wrapper .orbs .orb:nth-of-type(5){-webkit-animation:load 10s infinite 4s;animation:load 10s infinite 4s}@media screen and (min-width:599px){.preloader .wrapper{bottom:.5rem}}@media screen and (min-width:599px) and (min-height:420px){.preloader .wrapper{bottom:initial;top:10rem}}@-webkit-keyframes load{0%{background-color:#fff}49%{background-color:#fff}51%{background-color:#da4531}100%{background-color:#da4531}}@keyframes load{0%{background-color:#fff}49%{background-color:#fff}51%{background-color:#da4531}100%{background-color:#da4531}}.stop-preloader{opacity:0;pointer-events:none}.terminal{font-family:'Ubuntu Mono',monospace;color:#fff;width:100vw;font-size:1.5rem;box-shadow:0 2px 25px -8px rgba(0,0,0,.75)}@media screen and (min-width:900px){.terminal{max-width:60rem;margin:4rem auto}}.terminal .head{background-color:#45443f;background:-webkit-gradient(linear,left top,left bottom,from(#616056),to(#403f3a));background:linear-gradient(#616056,#403f3a);padding:.3rem;border-radius:5px 5px 0 0}.terminal .head__options{list-style:none;display:inline-block;margin:0 .5rem 0 .2rem}.terminal .head__options .icon{vertical-align:middle;width:1.2rem;height:1.2rem;border-radius:50px;display:inline-block;background-color:#807e7c;background:-webkit-gradient(linear,left top,left bottom,from(#807e7c),to(#616056));background:linear-gradient(#807e7c,#616056);text-align:center;color:#45443f;font-weight:700;font-size:1.1rem}.terminal .head__options .icon--close{background-color:#dd5c24;background:-webkit-gradient(linear,left top,left bottom,from(#e2885e),to(#dd5c24));background:linear-gradient(#e2885e,#dd5c24);text-align:center}.terminal .head__whoami{display:inline-block;vertical-align:middle;font-weight:700}.terminal .window{background-color:#300a24;min-height:500px;padding:.3rem;padding-bottom:5rem;opacity:.9}.terminal .window__text--user{color:#87e033;font-weight:700}.terminal .window .tilde{color:#789ac8}.terminal .window .grep{color:#ef2827;font-weight:700}.terminal .window .dir{font-weight:700;color:#789ac8}.terminal .window .current-tasks{list-style:none}.form{display:inline-block}.form__input{background-color:inherit;border:none;color:#789ac8;font-weight:700;caret-color:#fff}.form__input::-webkit-input-placeholder{color:#fff;font-weight:400}.form__input::-moz-placeholder{color:#fff;font-weight:400}.form__input:-ms-input-placeholder{color:#fff;font-weight:400}.form__input::-ms-input-placeholder{color:#fff;font-weight:400}.form__input::placeholder{color:#fff;font-weight:400}.form__btn{width:6rem;background-color:inherit;color:#fff;border:none;font-weight:700;text-decoration:underline;cursor:pointer}.form__btn--add{color:#87e033}.form__btn--remove{color:#ef2827}.prompt{background-color:#fff;margin-left:.3rem;-webkit-animation:1s blink 1s infinite;animation:1s blink 1s infinite;color:transparent;font-size:1rem}@-webkit-keyframes blink{0%{opacity:1}50%{opacity:1}51%{opacity:0}99%{opacity:0}100%{opacity:0}}@keyframes blink{0%{opacity:1}50%{opacity:1}51%{opacity:0}99%{opacity:0}100%{opacity:0}}.folders-tray{width:100vw;display:-webkit-box;display:flex;flex-wrap:wrap;-webkit-box-pack:start;justify-content:flex-start}@media screen and (min-width:900px){.folders-tray{max-width:60rem;margin:4rem auto}}.folders-tray .folder{display:inline-block;margin:2rem 1rem}.folders-tray .folder .folder__icon{display:block;position:relative;background-color:#e14b17;background-image:radial-gradient(circle at top,#efc18c 5%,#e14b17);height:50px;width:100px}.folders-tray .folder .folder__icon::after{position:absolute;top:-5px;left:2.5px;content:'';height:5px;width:95px;background-color:#f4f4f4}.folders-tray .folder .folder__icon::before{position:absolute;top:-8px;left:2.5px;content:'';height:5px;width:25px;border-radius:2px 2px 0 0;background-color:#f4f4f4}.folders-tray .folder__title{margin:.5rem auto;max-width:100px;display:block;text-align:center;color:#f4f4f4}*,::after,::before{box-sizing:border-box}
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImltcG9ydHMvX25vcm1hbGl6ZS5zY3NzIiwibWFpbi5jc3MiLCJnbG9iYWwvZ2VuZXJhbF9zdHlsZXMuc2NzcyIsImhlbHBlcnMvX2JyZWFrcG9pbnRzLnNjc3MiLCJsYXlvdXQvX3ByZWxvYWRlci5zY3NzIiwibGF5b3V0L190ZXJtaW5hbC5zY3NzIiwibGF5b3V0L19mb2xkZXJzLnNjc3MiLCJtYWluLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNEVBVUMsS0FDRyxZQUFBLEtBQ0EseUJBQUEsS0FVRixLQUNFLE9BQUEsRUFPRixLQUNFLFFBQUEsTUFRRixHQUNFLFVBQUEsSUFDQSxPQUFBLE1BQUEsRUFXRixHQUNFLFdBQUEsWUFDQSxPQUFBLEVBQ0EsU0FBQSxRQVFGLElBQ0UsWUFBQSxTQUFBLENBQUEsVUFDQSxVQUFBLElBVUYsRUFDRSxpQkFBQSxZQVFGLFlBQ0UsY0FBQSxLQUNBLGdCQUFBLFVBQ0Esd0JBQUEsVUFBQSxPQUFBLGdCQUFBLFVBQUEsT0FPRixFQ1ZGLE9EWUksWUFBQSxPQVFGLEtDWkYsSUFDQSxLRGNJLFlBQUEsU0FBQSxDQUFBLFVBQ0EsVUFBQSxJQU9GLE1BQ0UsVUFBQSxJQVFGLElDZEYsSURnQkksVUFBQSxJQUNBLFlBQUEsRUFDQSxTQUFBLFNBQ0EsZUFBQSxTQUdGLElBQ0UsT0FBQSxPQUdGLElBQ0UsSUFBQSxNQVVGLElBQ0UsYUFBQSxLQVdGLE9DdEJGLE1BQ0EsU0FDQSxPQUNBLFNEd0JJLFlBQUEsUUFDQSxVQUFBLEtBQ0EsWUFBQSxLQUNBLE9BQUEsRUFRRixPQ3BCRixNRHNCSSxTQUFBLFFBUUYsT0NyQkYsT0R1QkksZUFBQSxLQ2ZKLGNBQ0EsYUFDQSxjRG9CRSxPQUlFLG1CQUFBLE9DakJKLGdDQUNBLCtCQUNBLGdDRHNCRSx5QkFJRSxhQUFBLEtBQ0EsUUFBQSxFQ25CSiw2QkFDQSw0QkFDQSw2QkR3QkUsc0JBSUUsUUFBQSxJQUFBLE9BQUEsV0FPRixTQUNFLFFBQUEsTUFBQSxNQUFBLE9B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QUEsS0FBQSxNQVJOLHNCQWNNLFFBQUEsYUFDQSxPQUFBLEtBQUEsS0FmTixvQ0FrQlEsUUFBQSxNQUNBLFNBQUEsU0FDQSxpQkFBQSxRQUNBLGlCQUFBLGtEQUNBLE9BQUEsS0FDQSxNQUFBLE1BdkJSLDJDQTJCVSxTQUFBLFNBQ0EsSUFBQSxLQUNBLEtBQUEsTUFDQSxRQUFBLEdBQ0EsT0FBQSxJQUNBLE1BQUEsS0FDQSxpQkFBQSxRQWpDViw0Q0FxQ1UsU0FBQSxTQUNBLElBQUEsS0FDQSxLQUFBLE1BQ0EsUUFBQSxHQUNBLE9BQUEsSUFDQSxNQUFBLEtBQ0EsY0FBQSxJQUFBLElBQUEsRUFBQSxFQUNBLGlCQUFBLFFBNUNWLDZCQWtEUSxPQUFBLE1BQUEsS0FDQSxVQUFBLE1BQ0EsUUFBQSxNQUNBLFdBQUEsT0FDQSxNQUFBLFFDOUNSLEVOc2tCQSxRQURBLFNNbGtCSSxXQUFBIiwiZmlsZSI6Im1haW4uY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLyohIG5vcm1hbGl6ZS5jc3MgdjguMC4xIHwgTUlUIExpY2Vuc2UgfCBnaXRodWIuY29tL25lY29sYXMvbm9ybWFsaXplLmNzcyAqL1xuXG4vKiBEb2N1bWVudFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiAxLiBDb3JyZWN0IHRoZSBsaW5lIGhlaWdodCBpbiBhbGwgYnJvd3NlcnMuXG4gKiAyLiBQcmV2ZW50IGFkanVzdG1lbnRzIG9mIGZvbnQgc2l6ZSBhZnRlciBvcmllbnRhdGlvbiBjaGFuZ2VzIGluIGlPUy5cbiAqL1xuXG4gaHRtbCB7XG4gICAgbGluZS1oZWlnaHQ6IDEuMTU7IC8qIDEgKi9cbiAgICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDIgKi9cbiAgfVxuICBcbiAgLyogU2VjdGlvbnNcbiAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbiAgXG4gIC8qKlxuICAgKiBSZW1vdmUgdGhlIG1hcmdpbiBpbiBhbGwgYnJvd3NlcnMuXG4gICAqL1xuICBcbiAgYm9keSB7XG4gICAgbWFyZ2luOiAwO1xuICB9XG4gIFxuICAvKipcbiAgICogUmVuZGVyIHRoZSBgbWFpbmAgZWxlbWVudCBjb25zaXN0ZW50bHkgaW4gSUUuXG4gICAqL1xuICBcbiAgbWFpbiB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBDb3JyZWN0IHRoZSBmb250IHNpemUgYW5kIG1hcmdpbiBvbiBgaDFgIGVsZW1lbnRzIHdpdGhpbiBgc2VjdGlvbmAgYW5kXG4gICAqIGBhcnRpY2xlYCBjb250ZXh0cyBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBTYWZhcmkuXG4gICAqL1xuICBcbiAgaDEge1xuICAgIGZvbnQtc2l6ZTogMmVtO1xuICAgIG1hcmdpbjogMC42N2VtIDA7XG4gIH1cbiAgXG4gIC8qIEdyb3VwaW5nIGNvbnRlbnRcbiAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbiAgXG4gIC8qKlxuICAgKiAxLiBBZGQgdGhlIGNvcnJlY3QgYm94IHNpemluZyBpbiBGaXJlZm94LlxuICAgKiAyLiBTaG93IHRoZSBvdmVyZmxvdyBpbiBFZGdlIGFuZCBJRS5cbiAgICovXG4gIFxuICBociB7XG4gICAgYm94LXNpemluZzogY29udGVudC1ib3g7IC8qIDEgKi9cbiAgICBoZWlnaHQ6IDA7IC8qIDEgKi9cbiAgICBvdmVyZmxvdzogdmlzaWJsZTsgLyogMiAqL1xuICB9XG4gIFxuICAvKipcbiAgICogMS4gQ29ycmVjdCB0aGUgaW5oZXJpdGFuY2UgYW5kIHNjYWxpbmcgb2YgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAgICogMi4gQ29ycmVjdCB0aGUgb2RkIGBlbWAgZm9udCBzaXppbmcgaW4gYWxsIGJyb3dzZXJzLlxuICAgKi9cbiAgXG4gIHByZSB7XG4gICAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlOyAvKiAxICovXG4gICAgZm9udC1zaXplOiAxZW07IC8qIDIgKi9cbiAgfVxuICBcbiAgLyogVGV4dC1sZXZlbCBzZW1hbnRpY3NcbiAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbiAgXG4gIC8qKlxuICAgKiBSZW1vdmUgdGhlIGdyYXkgYmFja2dyb3VuZCBvbiBhY3RpdmUgbGlua3MgaW4gSUUgMTAuXG4gICAqL1xuICBcbiAgYSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiAxLiBSZW1vdmUgdGhlIGJvdHRvbSBib3JkZXIgaW4gQ2hyb21lIDU3LVxuICAgKiAyLiBBZGQgdGhlIGNvcnJlY3QgdGV4dCBkZWNvcmF0aW9uIGluIENocm9tZSwgRWRnZSwgSUUsIE9wZXJhLCBhbmQgU2FmYXJpLlxuICAgKi9cbiAgXG4gIGFiYnJbdGl0bGVdIHtcbiAgICBib3JkZXItYm90dG9tOiBub25lOyAvKiAxICovXG4gICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IC8qIDIgKi9cbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSBkb3R0ZWQ7IC8qIDIgKi9cbiAgfVxuICBcbiAgLyoqXG4gICAqIEFkZCB0aGUgY29ycmVjdCBmb250IHdlaWdodCBpbiBDaHJvbWUsIEVkZ2UsIGFuZCBTYWZhcmkuXG4gICAqL1xuICBcbiAgYixcbiAgc3Ryb25nIHtcbiAgICBmb250LXdlaWdodDogYm9sZGVyO1xuICB9XG4gIFxuICAvKipcbiAgICogMS4gQ29ycmVjdCB0aGUgaW5oZXJpdGFuY2UgYW5kIHNjYWxpbmcgb2YgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAgICogMi4gQ29ycmVjdCB0aGUgb2RkIGBlbWAgZm9udCBzaXppbmcgaW4gYWxsIGJyb3dzZXJzLlxuICAgKi9cbiAgXG4gIGNvZGUsXG4gIGtiZCxcbiAgc2FtcCB7XG4gICAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlOyAvKiAxICovXG4gICAgZm9udC1zaXplOiAxZW07IC8qIDIgKi9cbiAgfVxuICBcbiAgLyoqXG4gICAqIEFkZCB0aGUgY29ycmVjdCBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICAgKi9cbiAgXG4gIHNtYWxsIHtcbiAgICBmb250LXNpemU6IDgwJTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIFByZXZlbnQgYHN1YmAgYW5kIGBzdXBgIGVsZW1lbnRzIGZyb20gYWZmZWN0aW5nIHRoZSBsaW5lIGhlaWdodCBpblxuICAgKiBhbGwgYnJvd3NlcnMuXG4gICAqL1xuICBcbiAgc3ViLFxuICBzdXAge1xuICAgIGZvbnQtc2l6ZTogNzUlO1xuICAgIGxpbmUtaGVpZ2h0OiAwO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG4gIH1cbiAgXG4gIHN1YiB7XG4gICAgYm90dG9tOiAtMC4yNWVtO1xuICB9XG4gIFxuICBzdXAge1xuICAgIHRvcDogLTAuNWVtO1xuICB9XG4gIFxuICAvKiBFbWJlZGRlZCBjb250ZW50XG4gICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4gIFxuICAvKipcbiAgICogUmVtb3ZlIHRoZSBib3JkZXIgb24gaW1hZ2VzIGluc2lkZSBsaW5rcyBpbiBJRSAxMC5cbiAgICovXG4gIFxuICBpbWcge1xuICAgIGJvcmRlci1zdHlsZTogbm9uZTtcbiAgfVxuICBcbiAgLyogRm9ybXNcbiAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbiAgXG4gIC8qKlxuICAgKiAxLiBDaGFuZ2UgdGhlIGZvbnQgc3R5bGVzIGluIGFsbCBicm93c2Vycy5cbiAgICogMi4gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gRmlyZWZveCBhbmQgU2FmYXJpLlxuICAgKi9cbiAgXG4gIGJ1dHRvbixcbiAgaW5wdXQsXG4gIG9wdGdyb3VwLFxuICBzZWxlY3QsXG4gIHRleHRhcmVhIHtcbiAgICBmb250LWZhbWlseTogaW5oZXJpdDsgLyogMSAqL1xuICAgIGZvbnQtc2l6ZTogMTAwJTsgLyogMSAqL1xuICAgIGxpbmUtaGVpZ2h0OiAxLjE1OyAvKiAxICovXG4gICAgbWFyZ2luOiAwOyAvKiAyICovXG4gIH1cbiAgXG4gIC8qKlxuICAgKiBTaG93IHRoZSBvdmVyZmxvdyBpbiBJRS5cbiAgICogMS4gU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZS5cbiAgICovXG4gIFxuICBidXR0b24sXG4gIGlucHV0IHsgLyogMSAqL1xuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICB9XG4gIFxuICAvKipcbiAgICogUmVtb3ZlIHRoZSBpbmhlcml0YW5jZSBvZiB0ZXh0IHRyYW5zZm9ybSBpbiBFZGdlLCBGaXJlZm94LCBhbmQgSUUuXG4gICAqIDEuIFJlbW92ZSB0aGUgaW5oZXJpdGFuY2Ugb2YgdGV4dCB0cmFuc2Zvcm0gaW4gRmlyZWZveC5cbiAgICovXG4gIFxuICBidXR0b24sXG4gIHNlbGVjdCB7IC8qIDEgKi9cbiAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIENvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXG4gICAqL1xuICBcbiAgYnV0dG9uLFxuICBbdHlwZT1cImJ1dHRvblwiXSxcbiAgW3R5cGU9XCJyZXNldFwiXSxcbiAgW3R5cGU9XCJzdWJtaXRcIl0ge1xuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uO1xuICB9XG4gIFxuICAvKipcbiAgICogUmVtb3ZlIHRoZSBpbm5lciBib3JkZXIgYW5kIHBhZGRpbmcgaW4gRmlyZWZveC5cbiAgICovXG4gIFxuICBidXR0b246Oi1tb3otZm9jdXMtaW5uZXIsXG4gIFt0eXBlPVwiYnV0dG9uXCJdOjotbW96LWZvY3VzLWlubmVyLFxuICBbdHlwZT1cInJlc2V0XCJdOjotbW96LWZvY3VzLWlubmVyLFxuICBbdHlwZT1cInN1Ym1pdFwiXTo6LW1vei1mb2N1cy1pbm5lciB7XG4gICAgYm9yZGVyLXN0eWxlOiBub25lO1xuICAgIHBhZGRpbmc6IDA7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBSZXN0b3JlIHRoZSBmb2N1cyBzdHlsZXMgdW5zZXQgYnkgdGhlIHByZXZpb3VzIHJ1bGUuXG4gICAqL1xuICBcbiAgYnV0dG9uOi1tb3otZm9jdXNyaW5nLFxuICBbdHlwZT1cImJ1dHRvblwiXTotbW96LWZvY3VzcmluZyxcbiAgW3R5cGU9XCJyZXNldFwiXTotbW96LWZvY3VzcmluZyxcbiAgW3R5cGU9XCJzdWJtaXRcIl06LW1vei1mb2N1c3Jpbmcge1xuICAgIG91dGxpbmU6IDFweCBkb3R0ZWQgQnV0dG9uVGV4dDtcbiAgfVxuICBcbiAgLyoqXG4gICAqIENvcnJlY3QgdGhlIHBhZGRpbmcgaW4gRmlyZWZveC5cbiAgICovXG4gIFxuICBmaWVsZHNldCB7XG4gICAgcGFkZGluZzogMC4zNWVtIDAuNzVlbSAwLjYyNWVtO1xuICB9XG4gIFxuICAvKipcbiAgICogMS4gQ29ycmVjdCB0aGUgdGV4dCB3cmFwcGluZyBpbiBFZGdlIGFuZCBJRS5cbiAgICogMi4gQ29ycmVjdCB0aGUgY29sb3IgaW5oZXJpdGFuY2UgZnJvbSBgZmllbGRzZXRgIGVsZW1lbnRzIGluIElFLlxuICAgKiAzLiBSZW1vdmUgdGhlIHBhZGRpbmcgc28gZGV2ZWxvcGVycyBhcmUgbm90IGNhdWdodCBvdXQgd2hlbiB0aGV5IHplcm8gb3V0XG4gICAqICAgIGBmaWVsZHNldGAgZWxlbWVudHMgaW4gYWxsIGJyb3dzZXJzLlxuICAgKi9cbiAgXG4gIGxlZ2VuZCB7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogMSAqL1xuICAgIGNvbG9yOiBpbmhlcml0OyAvKiAyICovXG4gICAgZGlzcGxheTogdGFibGU7IC8qIDEgKi9cbiAgICBtYXgtd2lkdGg6IDEwMCU7IC8qIDEgKi9cbiAgICBwYWRkaW5nOiAwOyAvKiAzICovXG4gICAgd2hpdGUtc3BhY2U6IG5vcm1hbDsgLyogMSAqL1xuICB9XG4gIFxuICAvKipcbiAgICogQWRkIHRoZSBjb3JyZWN0IHZlcnRpY2FsIGFsaWdubWVudCBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBPcGVyYS5cbiAgICovXG4gIFxuICBwcm9ncmVzcyB7XG4gICAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xuICB9XG4gIFxuICAvKipcbiAgICogUmVtb3ZlIHRoZSBkZWZhdWx0IHZlcnRpY2FsIHNjcm9sbGJhciBpbiBJRSAxMCsuXG4gICAqL1xuICBcbiAgdGV4dGFyZWEge1xuICAgIG92ZXJmbG93OiBhdXRvO1xuICB9XG4gIFxuICAvKipcbiAgICogMS4gQWRkIHRoZSBjb3JyZWN0IGJveCBzaXppbmcgaW4gSUUgMTAuXG4gICAqIDIuIFJlbW92ZSB0aGUgcGFkZGluZyBpbiBJRSAxMC5cbiAgICovXG4gIFxuICBbdHlwZT1cImNoZWNrYm94XCJdLFxuICBbdHlwZT1cInJhZGlvXCJdIHtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAvKiAxICovXG4gICAgcGFkZGluZzogMDsgLyogMiAqL1xuICB9XG4gIFxuICAvKipcbiAgICogQ29ycmVjdCB0aGUgY3Vyc29yIHN0eWxlIG9mIGluY3JlbWVudCBhbmQgZGVjcmVtZW50IGJ1dHRvbnMgaW4gQ2hyb21lLlxuICAgKi9cbiAgXG4gIFt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFxuICBbdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbiB7XG4gICAgaGVpZ2h0OiBhdXRvO1xuICB9XG4gIFxuICAvKipcbiAgICogMS4gQ29ycmVjdCB0aGUgb2RkIGFwcGVhcmFuY2UgaW4gQ2hyb21lIGFuZCBTYWZhcmkuXG4gICAqIDIuIENvcnJlY3QgdGhlIG91dGxpbmUgc3R5bGUgaW4gU2FmYXJpLlxuICAgKi9cbiAgXG4gIFt0eXBlPVwic2VhcmNoXCJdIHtcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDsgLyogMSAqL1xuICAgIG91dGxpbmUtb2Zmc2V0OiAtMnB4OyAvKiAyICovXG4gIH1cbiAgXG4gIC8qKlxuICAgKiBSZW1vdmUgdGhlIGlubmVyIHBhZGRpbmcgaW4gQ2hyb21lIGFuZCBTYWZhcmkgb24gbWFjT1MuXG4gICAqL1xuICBcbiAgW3R5cGU9XCJzZWFyY2hcIl06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24ge1xuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIDEuIENvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXG4gICAqIDIuIENoYW5nZSBmb250IHByb3BlcnRpZXMgdG8gYGluaGVyaXRgIGluIFNhZmFyaS5cbiAgICovXG4gIFxuICA6Oi13ZWJraXQtZmlsZS11cGxvYWQtYnV0dG9uIHtcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgLyogMSAqL1xuICAgIGZvbnQ6IGluaGVyaXQ7IC8qIDIgKi9cbiAgfVxuICBcbiAgLyogSW50ZXJhY3RpdmVcbiAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbiAgXG4gIC8qXG4gICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIEVkZ2UsIElFIDEwKywgYW5kIEZpcmVmb3guXG4gICAqL1xuICBcbiAgZGV0YWlscyB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gIH1cbiAgXG4gIC8qXG4gICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIGFsbCBicm93c2Vycy5cbiAgICovXG4gIFxuICBzdW1tYXJ5IHtcbiAgICBkaXNwbGF5OiBsaXN0LWl0ZW07XG4gIH1cbiAgXG4gIC8qIE1pc2NcbiAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbiAgXG4gIC8qKlxuICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSAxMCsuXG4gICAqL1xuICBcbiAgdGVtcGxhdGUge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSAxMC5cbiAgICovXG4gIFxuICBbaGlkZGVuXSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfSIsIi8qISBub3JtYWxpemUuY3NzIHY4LjAuMSB8IE1JVCBMaWNlbnNlIHwgZ2l0aHViLmNvbS9uZWNvbGFzL25vcm1hbGl6ZS5jc3MgKi9cbi8qIERvY3VtZW50XG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiAxLiBDb3JyZWN0IHRoZSBsaW5lIGhlaWdodCBpbiBhbGwgYnJvd3NlcnMuXG4gKiAyLiBQcmV2ZW50IGFkanVzdG1lbnRzIG9mIGZvbnQgc2l6ZSBhZnRlciBvcmllbnRhdGlvbiBjaGFuZ2VzIGluIGlPUy5cbiAqL1xuaHRtbCB7XG4gIGxpbmUtaGVpZ2h0OiAxLjE1O1xuICAvKiAxICovXG4gIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcbiAgLyogMiAqLyB9XG5cbi8qIFNlY3Rpb25zXG4gICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAgICogUmVtb3ZlIHRoZSBtYXJnaW4gaW4gYWxsIGJyb3dzZXJzLlxuICAgKi9cbmJvZHkge1xuICBtYXJnaW46IDA7IH1cblxuLyoqXG4gICAqIFJlbmRlciB0aGUgYG1haW5gIGVsZW1lbnQgY29uc2lzdGVudGx5IGluIElFLlxuICAgKi9cbm1haW4ge1xuICBkaXNwbGF5OiBibG9jazsgfVxuXG4vKipcbiAgICogQ29ycmVjdCB0aGUgZm9udCBzaXplIGFuZCBtYXJnaW4gb24gYGgxYCBlbGVtZW50cyB3aXRoaW4gYHNlY3Rpb25gIGFuZFxuICAgKiBgYXJ0aWNsZWAgY29udGV4dHMgaW4gQ2hyb21lLCBGaXJlZm94LCBhbmQgU2FmYXJpLlxuICAgKi9cbmgxIHtcbiAgZm9udC1zaXplOiAyZW07XG4gIG1hcmdpbjogMC42N2VtIDA7IH1cblxuLyogR3JvdXBpbmcgY29udGVudFxuICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gICAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIEZpcmVmb3guXG4gICAqIDIuIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UgYW5kIElFLlxuICAgKi9cbmhyIHtcbiAgYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIC8qIDEgKi9cbiAgaGVpZ2h0OiAwO1xuICAvKiAxICovXG4gIG92ZXJmbG93OiB2aXNpYmxlO1xuICAvKiAyICovIH1cblxuLyoqXG4gICAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gICAqIDIuIENvcnJlY3QgdGhlIG9kZCBgZW1gIGZvbnQgc2l6aW5nIGluIGFsbCBicm93c2Vycy5cbiAgICovXG5wcmUge1xuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7XG4gIC8qIDEgKi9cbiAgZm9udC1zaXplOiAxZW07XG4gIC8qIDIgKi8gfVxuXG4vKiBUZXh0LWxldmVsIHNlbWFudGljc1xuICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gICAqIFJlbW92ZSB0aGUgZ3JheSBiYWNrZ3JvdW5kIG9uIGFjdGl2ZSBsaW5rcyBpbiBJRSAxMC5cbiAgICovXG5hIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cblxuLyoqXG4gICAqIDEuIFJlbW92ZSB0aGUgYm90dG9tIGJvcmRlciBpbiBDaHJvbWUgNTctXG4gICAqIDIuIEFkZCB0aGUgY29ycmVjdCB0ZXh0IGRlY29yYXRpb24gaW4gQ2hyb21lLCBFZGdlLCBJRSwgT3BlcmEsIGFuZCBTYWZhcmkuXG4gICAqL1xuYWJiclt0aXRsZV0ge1xuICBib3JkZXItYm90dG9tOiBub25lO1xuICAvKiAxICovXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICAvKiAyICovXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lIGRvdHRlZDtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICAgKiBBZGQgdGhlIGNvcnJlY3QgZm9udCB3ZWlnaHQgaW4gQ2hyb21lLCBFZGdlLCBhbmQgU2FmYXJpLlxuICAgKi9cbmIsXG5zdHJvbmcge1xuICBmb250LXdlaWdodDogYm9sZGVyOyB9XG5cbi8qKlxuICAgKiAxLiBDb3JyZWN0IHRoZSBpbmhlcml0YW5jZSBhbmQgc2NhbGluZyBvZiBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICAgKiAyLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXG4gICAqL1xuY29kZSxcbmtiZCxcbnNhbXAge1xuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7XG4gIC8qIDEgKi9cbiAgZm9udC1zaXplOiAxZW07XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAgICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gICAqL1xuc21hbGwge1xuICBmb250LXNpemU6IDgwJTsgfVxuXG4vKipcbiAgICogUHJldmVudCBgc3ViYCBhbmQgYHN1cGAgZWxlbWVudHMgZnJvbSBhZmZlY3RpbmcgdGhlIGxpbmUgaGVpZ2h0IGluXG4gICAqIGFsbCBicm93c2Vycy5cbiAgICovXG5zdWIsXG5zdXAge1xuICBmb250LXNpemU6IDc1JTtcbiAgbGluZS1oZWlnaHQ6IDA7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyB9XG5cbnN1YiB7XG4gIGJvdHRvbTogLTAuMjVlbTsgfVxuXG5zdXAge1xuICB0b3A6IC0wLjVlbTsgfVxuXG4vKiBFbWJlZGRlZCBjb250ZW50XG4gICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAgICogUmVtb3ZlIHRoZSBib3JkZXIgb24gaW1hZ2VzIGluc2lkZSBsaW5rcyBpbiBJRSAxMC5cbiAgICovXG5pbWcge1xuICBib3JkZXItc3R5bGU6IG5vbmU7IH1cblxuLyogRm9ybXNcbiAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICAgKiAxLiBDaGFuZ2UgdGhlIGZvbnQgc3R5bGVzIGluIGFsbCBicm93c2Vycy5cbiAgICogMi4gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gRmlyZWZveCBhbmQgU2FmYXJpLlxuICAgKi9cbmJ1dHRvbixcbmlucHV0LFxub3B0Z3JvdXAsXG5zZWxlY3QsXG50ZXh0YXJlYSB7XG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuICAvKiAxICovXG4gIGZvbnQtc2l6ZTogMTAwJTtcbiAgLyogMSAqL1xuICBsaW5lLWhlaWdodDogMS4xNTtcbiAgLyogMSAqL1xuICBtYXJnaW46IDA7XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAgICogU2hvdyB0aGUgb3ZlcmZsb3cgaW4gSUUuXG4gICAqIDEuIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UuXG4gICAqL1xuYnV0dG9uLFxuaW5wdXQge1xuICAvKiAxICovXG4gIG92ZXJmbG93OiB2aXNpYmxlOyB9XG5cbi8qKlxuICAgKiBSZW1vdmUgdGhlIGluaGVyaXRhbmNlIG9mIHRleHQgdHJhbnNmb3JtIGluIEVkZ2UsIEZpcmVmb3gsIGFuZCBJRS5cbiAgICogMS4gUmVtb3ZlIHRoZSBpbmhlcml0YW5jZSBvZiB0ZXh0IHRyYW5zZm9ybSBpbiBGaXJlZm94LlxuICAgKi9cbmJ1dHRvbixcbnNlbGVjdCB7XG4gIC8qIDEgKi9cbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7IH1cblxuLyoqXG4gICAqIENvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXG4gICAqL1xuYnV0dG9uLFxuW3R5cGU9XCJidXR0b25cIl0sXG5bdHlwZT1cInJlc2V0XCJdLFxuW3R5cGU9XCJzdWJtaXRcIl0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgfVxuXG4vKipcbiAgICogUmVtb3ZlIHRoZSBpbm5lciBib3JkZXIgYW5kIHBhZGRpbmcgaW4gRmlyZWZveC5cbiAgICovXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsXG5bdHlwZT1cImJ1dHRvblwiXTo6LW1vei1mb2N1cy1pbm5lcixcblt0eXBlPVwicmVzZXRcIl06Oi1tb3otZm9jdXMtaW5uZXIsXG5bdHlwZT1cInN1Ym1pdFwiXTo6LW1vei1mb2N1cy1pbm5lciB7XG4gIGJvcmRlci1zdHlsZTogbm9uZTtcbiAgcGFkZGluZzogMDsgfVxuXG4vKipcbiAgICogUmVzdG9yZSB0aGUgZm9jdXMgc3R5bGVzIHVuc2V0IGJ5IHRoZSBwcmV2aW91cyBydWxlLlxuICAgKi9cbmJ1dHRvbjotbW96LWZvY3VzcmluZyxcblt0eXBlPVwiYnV0dG9uXCJdOi1tb3otZm9jdXNyaW5nLFxuW3R5cGU9XCJyZXNldFwiXTotbW96LWZvY3VzcmluZyxcblt0eXBlPVwic3VibWl0XCJdOi1tb3otZm9jdXNyaW5nIHtcbiAgb3V0bGluZTogMXB4IGRvdHRlZCBCdXR0b25UZXh0OyB9XG5cbi8qKlxuICAgKiBDb3JyZWN0IHRoZSBwYWRkaW5nIGluIEZpcmVmb3guXG4gICAqL1xuZmllbGRzZXQge1xuICBwYWRkaW5nOiAwLjM1ZW0gMC43NWVtIDAuNjI1ZW07IH1cblxuLyoqXG4gICAqIDEuIENvcnJlY3QgdGhlIHRleHQgd3JhcHBpbmcgaW4gRWRnZSBhbmQgSUUuXG4gICAqIDIuIENvcnJlY3QgdGhlIGNvbG9yIGluaGVyaXRhbmNlIGZyb20gYGZpZWxkc2V0YCBlbGVtZW50cyBpbiBJRS5cbiAgICogMy4gUmVtb3ZlIHRoZSBwYWRkaW5nIHNvIGRldmVsb3BlcnMgYXJlIG5vdCBjYXVnaHQgb3V0IHdoZW4gdGhleSB6ZXJvIG91dFxuICAgKiAgICBgZmllbGRzZXRgIGVsZW1lbnRzIGluIGFsbCBicm93c2Vycy5cbiAgICovXG5sZWdlbmQge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAvKiAxICovXG4gIGNvbG9yOiBpbmhlcml0O1xuICAvKiAyICovXG4gIGRpc3BsYXk6IHRhYmxlO1xuICAvKiAxICovXG4gIG1heC13aWR0aDogMTAwJTtcbiAgLyogMSAqL1xuICBwYWRkaW5nOiAwO1xuICAvKiAzICovXG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7XG4gIC8qIDEgKi8gfVxuXG4vKipcbiAgICogQWRkIHRoZSBjb3JyZWN0IHZlcnRpY2FsIGFsaWdubWVudCBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBPcGVyYS5cbiAgICovXG5wcm9ncmVzcyB7XG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTsgfVxuXG4vKipcbiAgICogUmVtb3ZlIHRoZSBkZWZhdWx0IHZlcnRpY2FsIHNjcm9sbGJhciBpbiBJRSAxMCsuXG4gICAqL1xudGV4dGFyZWEge1xuICBvdmVyZmxvdzogYXV0bzsgfVxuXG4vKipcbiAgICogMS4gQWRkIHRoZSBjb3JyZWN0IGJveCBzaXppbmcgaW4gSUUgMTAuXG4gICAqIDIuIFJlbW92ZSB0aGUgcGFkZGluZyBpbiBJRSAxMC5cbiAgICovXG5bdHlwZT1cImNoZWNrYm94XCJdLFxuW3R5cGU9XCJyYWRpb1wiXSB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIC8qIDEgKi9cbiAgcGFkZGluZzogMDtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICAgKiBDb3JyZWN0IHRoZSBjdXJzb3Igc3R5bGUgb2YgaW5jcmVtZW50IGFuZCBkZWNyZW1lbnQgYnV0dG9ucyBpbiBDaHJvbWUuXG4gICAqL1xuW3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sXG5bdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbiB7XG4gIGhlaWdodDogYXV0bzsgfVxuXG4vKipcbiAgICogMS4gQ29ycmVjdCB0aGUgb2RkIGFwcGVhcmFuY2UgaW4gQ2hyb21lIGFuZCBTYWZhcmkuXG4gICAqIDIuIENvcnJlY3QgdGhlIG91dGxpbmUgc3R5bGUgaW4gU2FmYXJpLlxuICAgKi9cblt0eXBlPVwic2VhcmNoXCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7XG4gIC8qIDEgKi9cbiAgb3V0bGluZS1vZmZzZXQ6IC0ycHg7XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAgICogUmVtb3ZlIHRoZSBpbm5lciBwYWRkaW5nIGluIENocm9tZSBhbmQgU2FmYXJpIG9uIG1hY09TLlxuICAgKi9cblt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOyB9XG5cbi8qKlxuICAgKiAxLiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIHR5cGVzIGluIGlPUyBhbmQgU2FmYXJpLlxuICAgKiAyLiBDaGFuZ2UgZm9udCBwcm9wZXJ0aWVzIHRvIGBpbmhlcml0YCBpbiBTYWZhcmkuXG4gICAqL1xuOjotd2Via2l0LWZpbGUtdXBsb2FkLWJ1dHRvbiB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uO1xuICAvKiAxICovXG4gIGZvbnQ6IGluaGVyaXQ7XG4gIC8qIDIgKi8gfVxuXG4vKiBJbnRlcmFjdGl2ZVxuICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLypcbiAgICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gRWRnZSwgSUUgMTArLCBhbmQgRmlyZWZveC5cbiAgICovXG5kZXRhaWxzIHtcbiAgZGlzcGxheTogYmxvY2s7IH1cblxuLypcbiAgICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gYWxsIGJyb3dzZXJzLlxuICAgKi9cbnN1bW1hcnkge1xuICBkaXNwbGF5OiBsaXN0LWl0ZW07IH1cblxuLyogTWlzY1xuICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDEwKy5cbiAgICovXG50ZW1wbGF0ZSB7XG4gIGRpc3BsYXk6IG5vbmU7IH1cblxuLyoqXG4gICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDEwLlxuICAgKi9cbltoaWRkZW5dIHtcbiAgZGlzcGxheTogbm9uZTsgfVxuXG4vKioqKioqKioqKioqKioqKioqKioqXG5CUkVBS1BPSU5UU1xuKioqKioqKioqKioqKioqKioqKioqL1xuLyogR0VORVJBTCBTVFlMRVMgU1RBUlQgKi9cbmh0bWwge1xuICBmb250LWZhbWlseTogJ1JvYm90bycsIHNhbnMtc2VyaWY7XG4gIGJhY2tncm91bmQtY29sb3I6ICMzYjA0MmM7XG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byB0b3AgcmlnaHQsICMzYjA0MmMgMzAlLCAjOWQyMTM5IDYwJSwgI2U2NTEwZiA5MCUpIG5vLXJlcGVhdCBjZW50ZXIgY2VudGVyIGZpeGVkO1xuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyOyB9XG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwMHB4KSB7XG4gICAgaHRtbCB7XG4gICAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9pbWcvYmVhdmVyLWxhcmdlLmpwZ1wiKSBuby1yZXBlYXQgY2VudGVyIGNlbnRlciBmaXhlZDtcbiAgICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyOyB9IH1cblxucCwgdWwsIGxpIHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwOyB9XG5cbi8qIEdFTkVSQUwgU1RZTEVTIEVORCAqL1xuLyoqKioqKioqKioqKioqKioqKioqKlxuQlJFQUtQT0lOVFNcbioqKioqKioqKioqKioqKioqKioqKi9cbi5wcmVsb2FkZXIge1xuICB6LWluZGV4OiAzO1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHRvcDogMDtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwdmg7XG4gIGJhY2tncm91bmQtY29sb3I6ICMyYjAwMWU7XG4gIHRyYW5zaXRpb246IG9wYWNpdHkgZWFzZS1vdXQgMC41czsgfVxuICAucHJlbG9hZGVyIC53cmFwcGVyIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgd2lkdGg6IDEycmVtO1xuICAgIGxlZnQ6IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgdG9wOiA1cmVtO1xuICAgIGJvdHRvbTogMTdyZW07XG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvOyB9XG4gICAgLnByZWxvYWRlciAud3JhcHBlciAuaW50cm8ge1xuICAgICAgY29sb3I6ICNmZmY7XG4gICAgICBmb250LXNpemU6IDNyZW07XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIG1hcmdpbjogMnJlbSAwLjdyZW07IH1cbiAgICAucHJlbG9hZGVyIC53cmFwcGVyIC5vcmJzIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47IH1cbiAgICAgIC5wcmVsb2FkZXIgLndyYXBwZXIgLm9yYnMgLm9yYiB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICB3aWR0aDogNXB4O1xuICAgICAgICBoZWlnaHQ6IDVweDtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNTBweDtcbiAgICAgICAgYW5pbWF0aW9uOiBsb2FkIDEwcyBpbmZpbml0ZSAwczsgfVxuICAgICAgLnByZWxvYWRlciAud3JhcHBlciAub3JicyAub3JiOm50aC1vZi10eXBlKDIpIHtcbiAgICAgICAgYW5pbWF0aW9uOiBsb2FkIDEwcyBpbmZpbml0ZSAxczsgfVxuICAgICAgLnByZWxvYWRlciAud3JhcHBlciAub3JicyAub3JiOm50aC1vZi10eXBlKDMpIHtcbiAgICAgICAgYW5pbWF0aW9uOiBsb2FkIDEwcyBpbmZpbml0ZSAyczsgfVxuICAgICAgLnByZWxvYWRlciAud3JhcHBlciAub3JicyAub3JiOm50aC1vZi10eXBlKDQpIHtcbiAgICAgICAgYW5pbWF0aW9uOiBsb2FkIDEwcyBpbmZpbml0ZSAzczsgfVxuICAgICAgLnByZWxvYWRlciAud3JhcHBlciAub3JicyAub3JiOm50aC1vZi10eXBlKDUpIHtcbiAgICAgICAgYW5pbWF0aW9uOiBsb2FkIDEwcyBpbmZpbml0ZSA0czsgfVxuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDU5OXB4KSB7XG4gICAgICAucHJlbG9hZGVyIC53cmFwcGVyIHtcbiAgICAgICAgYm90dG9tOiAwLjVyZW07IH0gfVxuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDU5OXB4KSBhbmQgKG1pbi1oZWlnaHQ6IDQyMHB4KSB7XG4gICAgICAucHJlbG9hZGVyIC53cmFwcGVyIHtcbiAgICAgICAgYm90dG9tOiBpbml0aWFsO1xuICAgICAgICB0b3A6IDEwcmVtOyB9IH1cblxuQGtleWZyYW1lcyBsb2FkIHtcbiAgMCUge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7IH1cbiAgNDklIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOyB9XG4gIDUxJSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2RhNDUzMTsgfVxuICAxMDAlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGE0NTMxOyB9IH1cblxuLnN0b3AtcHJlbG9hZGVyIHtcbiAgb3BhY2l0eTogMDtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7IH1cblxuLyogVEVSTUlOQUwgV0lORE9XIFNUWUxFIFNUQVJUICovXG4udGVybWluYWwge1xuICBmb250LWZhbWlseTogJ1VidW50dSBNb25vJywgbW9ub3NwYWNlO1xuICBjb2xvcjogd2hpdGU7XG4gIHdpZHRoOiAxMDB2dztcbiAgZm9udC1zaXplOiAxLjVyZW07XG4gIGJveC1zaGFkb3c6IDBweCAycHggMjVweCAtOHB4IHJnYmEoMCwgMCwgMCwgMC43NSk7IH1cbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogOTAwcHgpIHtcbiAgICAudGVybWluYWwge1xuICAgICAgbWF4LXdpZHRoOiA2MHJlbTtcbiAgICAgIG1hcmdpbjogNHJlbSBhdXRvOyB9IH1cbiAgLnRlcm1pbmFsIC5oZWFkIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDU0NDNmO1xuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgjNjE2MDU2LCAjNDAzZjNhKTtcbiAgICBwYWRkaW5nOiAwLjNyZW07XG4gICAgYm9yZGVyLXJhZGl1czogNXB4IDVweCAwIDA7IH1cbiAgICAudGVybWluYWwgLmhlYWRfX29wdGlvbnMge1xuICAgICAgbGlzdC1zdHlsZTogbm9uZTtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIG1hcmdpbjogMCAwLjVyZW0gMCAwLjJyZW07IH1cbiAgICAgIC50ZXJtaW5hbCAuaGVhZF9fb3B0aW9ucyAuaWNvbiB7XG4gICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gICAgICAgIHdpZHRoOiAxLjJyZW07XG4gICAgICAgIGhlaWdodDogMS4ycmVtO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1MHB4O1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICM4MDdlN2M7XG4gICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgjODA3ZTdjLCAjNjE2MDU2KTtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICBjb2xvcjogIzQ1NDQzZjtcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICAgIGZvbnQtc2l6ZTogMS4xcmVtOyB9XG4gICAgICAgIC50ZXJtaW5hbCAuaGVhZF9fb3B0aW9ucyAuaWNvbi0tY2xvc2Uge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNkZDVjMjQ7XG4gICAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KCNlMjg4NWUsICNkZDVjMjQpO1xuICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsgfVxuICAgIC50ZXJtaW5hbCAuaGVhZF9fd2hvYW1pIHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gICAgICBmb250LXdlaWdodDogYm9sZDsgfVxuICAudGVybWluYWwgLndpbmRvdyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzMwMGEyNDtcbiAgICBtaW4taGVpZ2h0OiA1MDBweDtcbiAgICBwYWRkaW5nOiAwLjNyZW07XG4gICAgcGFkZGluZy1ib3R0b206IDVyZW07XG4gICAgb3BhY2l0eTogMC45OyB9XG4gICAgLnRlcm1pbmFsIC53aW5kb3dfX3RleHQtLXVzZXIge1xuICAgICAgY29sb3I6ICM4N2UwMzM7XG4gICAgICBmb250LXdlaWdodDogYm9sZDsgfVxuICAgIC50ZXJtaW5hbCAud2luZG93IC50aWxkZSB7XG4gICAgICBjb2xvcjogIzc4OWFjODsgfVxuICAgIC50ZXJtaW5hbCAud2luZG93IC5ncmVwIHtcbiAgICAgIGNvbG9yOiAjZWYyODI3O1xuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7IH1cbiAgICAudGVybWluYWwgLndpbmRvdyAuZGlyIHtcbiAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgY29sb3I6ICM3ODlhYzg7IH1cbiAgICAudGVybWluYWwgLndpbmRvdyAuY3VycmVudC10YXNrcyB7XG4gICAgICBsaXN0LXN0eWxlOiBub25lOyB9XG5cbi8qIEZPUk0gU1RZTEUgKi9cbi5mb3JtIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XG4gIC5mb3JtX19pbnB1dCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogaW5oZXJpdDtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgY29sb3I6ICM3ODlhYzg7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgY2FyZXQtY29sb3I6ICNmZmY7IH1cbiAgICAuZm9ybV9faW5wdXQ6OnBsYWNlaG9sZGVyIHtcbiAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7IH1cbiAgLmZvcm1fX2J0biB7XG4gICAgd2lkdGg6IDZyZW07XG4gICAgYmFja2dyb3VuZC1jb2xvcjogaW5oZXJpdDtcbiAgICBjb2xvcjogI2ZmZjtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gICAgY3Vyc29yOiBwb2ludGVyOyB9XG4gICAgLmZvcm1fX2J0bi0tYWRkIHtcbiAgICAgIGNvbG9yOiAjODdlMDMzOyB9XG4gICAgLmZvcm1fX2J0bi0tcmVtb3ZlIHtcbiAgICAgIGNvbG9yOiAjZWYyODI3OyB9XG5cbi5wcm9tcHQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgbWFyZ2luLWxlZnQ6IDAuM3JlbTtcbiAgYW5pbWF0aW9uOiAxcyBibGluayAxcyBpbmZpbml0ZTtcbiAgY29sb3I6IHRyYW5zcGFyZW50O1xuICBmb250LXNpemU6IDFyZW07IH1cblxuLyogVEVSTUlOQUwgV0lORE9XIFNUWUxFIEVORCovXG5Aa2V5ZnJhbWVzIGJsaW5rIHtcbiAgMCUge1xuICAgIG9wYWNpdHk6IDE7IH1cbiAgNTAlIHtcbiAgICBvcGFjaXR5OiAxOyB9XG4gIDUxJSB7XG4gICAgb3BhY2l0eTogMDsgfVxuICA5OSUge1xuICAgIG9wYWNpdHk6IDA7IH1cbiAgMTAwJSB7XG4gICAgb3BhY2l0eTogMDsgfSB9XG5cbi5mb2xkZXJzLXRyYXkge1xuICB3aWR0aDogMTAwdnc7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtd3JhcDogd3JhcDtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0OyB9XG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDkwMHB4KSB7XG4gICAgLmZvbGRlcnMtdHJheSB7XG4gICAgICBtYXgtd2lkdGg6IDYwcmVtO1xuICAgICAgbWFyZ2luOiA0cmVtIGF1dG87IH0gfVxuICAuZm9sZGVycy10cmF5IC5mb2xkZXIge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBtYXJnaW46IDJyZW0gMXJlbTsgfVxuICAgIC5mb2xkZXJzLXRyYXkgLmZvbGRlciAuZm9sZGVyX19pY29uIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2UxNGIxNztcbiAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHJhZGlhbC1ncmFkaWVudChjaXJjbGUgYXQgdG9wLCAjZWZjMThjIDUlLCAjZTE0YjE3KTtcbiAgICAgIGhlaWdodDogNTBweDtcbiAgICAgIHdpZHRoOiAxMDBweDsgfVxuICAgICAgLmZvbGRlcnMtdHJheSAuZm9sZGVyIC5mb2xkZXJfX2ljb246OmFmdGVyIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IC01cHg7XG4gICAgICAgIGxlZnQ6IDIuNXB4O1xuICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgaGVpZ2h0OiA1cHg7XG4gICAgICAgIHdpZHRoOiA5NXB4O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjRmNGY0OyB9XG4gICAgICAuZm9sZGVycy10cmF5IC5mb2xkZXIgLmZvbGRlcl9faWNvbjo6YmVmb3JlIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IC04cHg7XG4gICAgICAgIGxlZnQ6IDIuNXB4O1xuICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgaGVpZ2h0OiA1cHg7XG4gICAgICAgIHdpZHRoOiAyNXB4O1xuICAgICAgICBib3JkZXItcmFkaXVzOiAycHggMnB4IDAgMDtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2Y0ZjRmNDsgfVxuICAgIC5mb2xkZXJzLXRyYXkgLmZvbGRlcl9fdGl0bGUge1xuICAgICAgbWFyZ2luOiAwLjVyZW0gYXV0bztcbiAgICAgIG1heC13aWR0aDogMTAwcHg7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgIGNvbG9yOiAjZjRmNGY0OyB9XG5cbi8qIEdFTkVSQUwgU1RZTEVTIFNUQVJUICovXG4qLFxuKjo6YmVmb3JlLFxuKjo6YWZ0ZXIge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9XG4iLCJAaW1wb3J0ICcuLi9oZWxwZXJzL2JyZWFrcG9pbnRzLnNjc3MnO1xuXG4vKiBHRU5FUkFMIFNUWUxFUyBTVEFSVCAqL1xuaHRtbCB7XG4gICAgZm9udC1mYW1pbHk6ICdSb2JvdG8nLCBzYW5zLXNlcmlmO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMzYjA0MmM7XG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRvIHRvcCByaWdodCwgIzNiMDQyYyAzMCUsIzlkMjEzOSA2MCUsICNlNjUxMGYgOTAlKSBuby1yZXBlYXQgY2VudGVyIGNlbnRlciBmaXhlZDtcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG5cbiAgICBAaW5jbHVkZSBzY3JlZW4tdHlwZSh0YWJsZXQtcG9ydHJhaXQpe1xuICAgICAgYmFja2dyb3VuZDogdXJsKCcuLi9pbWcvYmVhdmVyLWxhcmdlLmpwZycpIG5vLXJlcGVhdCBjZW50ZXIgY2VudGVyIGZpeGVkO1xuICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gICAgfVxuXG59XG5cbnAsIHVsLCBsaSB7XG5cdG1hcmdpbjogMDtcblx0cGFkZGluZzogMDtcbn1cbi8qIEdFTkVSQUwgU1RZTEVTIEVORCAqLyIsIi8qKioqKioqKioqKioqKioqKioqKipcbkJSRUFLUE9JTlRTXG4qKioqKioqKioqKioqKioqKioqKiovXG5cbkBtaXhpbiBzY3JlZW4tdHlwZSgkcG9pbnQpIHtcbiAgIEBpZiAkcG9pbnQgPT0gcGhvbmUtc21hbGwge1xuICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDAwcHgpeyBAY29udGVudCA7IH1cbiAgIH1cblxuICAgQGVsc2UgaWYgJHBvaW50ID09IHBob25lLW1lZGl1bSB7XG4gICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA1OTlweCl7IEBjb250ZW50IDsgfVxuICAgfVxuXG4gICBAZWxzZSBpZiAkcG9pbnQgPT0gcGhvbmUtbWVkaXVtLWxhbmRzY2FwZSB7XG4gICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA1OTlweCkgYW5kIChtaW4taGVpZ2h0OiA0MjBweCl7IEBjb250ZW50IDsgfVxuICAgfVxuXG4gICAgQGVsc2UgaWYgJHBvaW50ID09IHRhYmxldC1wb3J0cmFpdCB7XG4gICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MDBweCkgeyBAY29udGVudCA7IH1cbiAgIH1cbiAgICAgQGVsc2UgaWYgJHBvaW50ID09IHRhYmxldC1sYW5kc2NhcGUge1xuICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogOTAwcHgpIHsgQGNvbnRlbnQgOyB9XG4gICB9XG4gICAgQGVsc2UgaWYgJHBvaW50ID09IGRlc2t0b3Age1xuICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTIwMHB4KSAgeyBAY29udGVudCA7IH1cbiAgIH1cbiAgIEBlbHNlIGlmICRwb2ludCA9PSBiaWctZGVza3RvcCB7XG4gICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxODAwcHgpICB7IEBjb250ZW50IDsgfVxuIFxuICAgfVxuIH1cblxuLy8gIHVzYWdlIGV4YW1wbGVcIlxuXG5AaW5jbHVkZSBzY3JlZW4tdHlwZShwaG9uZS1tZWRpdW0tbGFuZHNjYXBlKXtcblxufSIsIlxuLnByZWxvYWRlciB7XG4gICAgei1pbmRleDogMztcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgdG9wOiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwdmg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzJiMDAxZTtcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IGVhc2Utb3V0IDAuNXM7XG5cbiAgICAud3JhcHBlcnsgXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgICBcbiAgICAgICAgd2lkdGg6IDEycmVtO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICByaWdodDowO1xuICAgICAgICB0b3A6IDVyZW07XG4gICAgICAgIGJvdHRvbTogMTdyZW07XG4gICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvOyBcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuXG4gICAgICAgIC5pbnRybyB7XG4gICAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogM3JlbTtcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgbWFyZ2luOiAycmVtIDAuN3JlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5vcmJzIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cbiAgICAgICAgICAgIC5vcmIge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgICAgIHdpZHRoOiA1cHg7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA1cHg7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1MHB4O1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogbG9hZCAxMHMgaW5maW5pdGUgMHM7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAub3JiOm50aC1vZi10eXBlKDIpe1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogbG9hZCAxMHMgaW5maW5pdGUgMXM7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAub3JiOm50aC1vZi10eXBlKDMpe1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogbG9hZCAxMHMgaW5maW5pdGUgMnM7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAub3JiOm50aC1vZi10eXBlKDQpe1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogbG9hZCAxMHMgaW5maW5pdGUgM3M7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAub3JiOm50aC1vZi10eXBlKDUpe1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogbG9hZCAxMHMgaW5maW5pdGUgNHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXG4gICAgICAgIEBpbmNsdWRlIHNjcmVlbi10eXBlKHBob25lLW1lZGl1bSl7XG4gICAgICAgICAgYm90dG9tIDogMC41cmVtO1xuICAgICAgICB9XG5cbiAgICAgICAgQGluY2x1ZGUgc2NyZWVuLXR5cGUocGhvbmUtbWVkaXVtLWxhbmRzY2FwZSl7XG4gICAgICAgICAgYm90dG9tOiBpbml0aWFsO1xuICAgICAgICAgIHRvcDogMTByZW07XG4gICAgICAgIH1cbiAgICAgICAgICAgICAgXG4gICAgfVxufVxuXG4vLyBBbmltYXRpb25cbkBrZXlmcmFtZXMgbG9hZCB7XG4gICAgMCUge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICAgIH1cblxuICAgIDQ5JSB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gICAgfVxuXG4gICAgNTElIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2RhNDUzMTtcbiAgICB9XG5cbiAgICAxMDAlIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2RhNDUzMTtcbiAgICB9XG4gXG59XG5cbi8vIGpzIGNsYXNzZXNcbi5zdG9wLXByZWxvYWRlciB7XG4gICAgb3BhY2l0eTogMDtcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbn0iLCIvKiBURVJNSU5BTCBXSU5ET1cgU1RZTEUgU1RBUlQgKi9cbi50ZXJtaW5hbCB7XG5cdGZvbnQtZmFtaWx5OiAnVWJ1bnR1IE1vbm8nLCBtb25vc3BhY2U7XG5cdGNvbG9yOiB3aGl0ZTtcbiAgd2lkdGg6IDEwMHZ3O1xuICBmb250LXNpemU6IDEuNXJlbTtcbiAgYm94LXNoYWRvdzogMHB4IDJweCAyNXB4IC04cHggcmdiYSgwLDAsMCwwLjc1KTtcblxuICBAaW5jbHVkZSBzY3JlZW4tdHlwZSh0YWJsZXQtbGFuZHNjYXBlKXtcbiAgICBtYXgtd2lkdGg6IDYwcmVtO1xuICAgIG1hcmdpbjogNHJlbSBhdXRvO1xuICB9XG5cbiAgLmhlYWQge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM0NTQ0M2Y7XG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KCM2MTYwNTYsICM0MDNmM2EpO1xuICAgIHBhZGRpbmc6IDAuM3JlbTtcbiAgICBib3JkZXItcmFkaXVzOiA1cHggNXB4IDAgMDtcblxuICAgICZfX29wdGlvbnMge1xuICAgICAgbGlzdC1zdHlsZTogbm9uZTtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIG1hcmdpbjogMCAwLjVyZW0gMCAwLjJyZW07XG5cbiAgICAgIC5pY29uIHtcbiAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICAgICAgd2lkdGg6IDEuMnJlbTtcbiAgICAgICAgaGVpZ2h0OiAxLjJyZW07XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDUwcHg7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzgwN2U3YztcbiAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KCM4MDdlN2MsICM2MTYwNTYpO1xuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIGNvbG9yOiAjNDU0NDNmO1xuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgZm9udC1zaXplOiAxLjFyZW07XG5cbiAgICAgICAgJi0tY2xvc2Uge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNkZDVjMjQ7XG4gICAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KCNlMjg4NWUsICNkZDVjMjQpO1xuICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgICZfX3dob2FtaSB7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgfVxuICB9XG5cblxuICAud2luZG93IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzAwYTI0O1xuICAgIG1pbi1oZWlnaHQ6IDUwMHB4O1xuICAgIHBhZGRpbmc6IDAuM3JlbTtcbiAgICBwYWRkaW5nLWJvdHRvbTogNXJlbTtcbiAgICBvcGFjaXR5OiAwLjk7XG5cbiAgICAmX190ZXh0LS11c2VyIHtcbiAgICAgIGNvbG9yOiAjODdlMDMzO1xuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgfVxuXG4gICAgLnRpbGRlIHtcbiAgICAgIGNvbG9yOiAjNzg5YWM4O1xuICAgIFxuICAgIH1cbiAgICBcbiAgICAuZ3JlcCB7XG4gICAgICBjb2xvcjogI2VmMjgyNztcbiAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIH1cbiAgICBcbiAgICAuZGlyIHtcbiAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgY29sb3I6ICM3ODlhYzg7XG4gICAgfVxuXG4gICAgLmN1cnJlbnQtdGFza3N7XG4gICAgICBsaXN0LXN0eWxlOiBub25lO1xuICAgIH1cbiAgfVxufVxuXG4vKiBGT1JNIFNUWUxFICovXG4uZm9ybSB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICZfX2lucHV0IHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XG4gICAgICBib3JkZXI6IG5vbmU7XG4gICAgICBjb2xvcjogIzc4OWFjODtcbiAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgY2FyZXQtY29sb3I6ICNmZmY7XG4gICAgICBcbiAgICAgICY6OnBsYWNlaG9sZGVye1xuICAgICAgICBjb2xvcjogd2hpdGU7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgfVxuICB9XG5cbiAgJl9fYnRuIHtcbiAgICB3aWR0aDogNnJlbTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBpbmhlcml0O1xuICAgIGNvbG9yOiAjZmZmO1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG5cbiAgICAmLS1hZGQge1xuICAgICAgY29sb3I6ICM4N2UwMzM7XG4gICAgfVxuICBcbiAgICAmLS1yZW1vdmV7XG4gICAgICBjb2xvcjogI2VmMjgyNztcbiAgICB9XG4gIH1cbn1cblxuLnByb21wdCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgbWFyZ2luLWxlZnQ6IDAuM3JlbTtcbiAgICBhbmltYXRpb246IDFzIGJsaW5rIDFzIGluZmluaXRlO1xuICAgIGNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICBmb250LXNpemU6IDFyZW07XG4gIH1cbi8qIFRFUk1JTkFMIFdJTkRPVyBTVFlMRSBFTkQqL1xuXG5cblxuXG4vLyBBTklNQVRJT05cbkBrZXlmcmFtZXMgYmxpbmsge1xuICAgIDAlIHtcbiAgICAgIG9wYWNpdHk6IDE7XG4gICAgfVxuXG4gICAgNTAlIHtcbiAgICAgIG9wYWNpdHk6IDFcbiAgICB9XG5cbiAgICA1MSUge1xuICAgICAgb3BhY2l0eTogMFxuICAgIH1cblxuICAgIDk5JSB7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgIH1cblxuICAgIDEwMCUge1xuICAgICAgb3BhY2l0eTogMDtcbiAgICB9XG4gIH0iLCIvLyBGT0xERVJTLVRSQVkgU1RBUlRcbi5mb2xkZXJzLXRyYXl7XG4gICAgd2lkdGg6IDEwMHZ3O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC13cmFwOiB3cmFwO1xuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgXG4gICAgQGluY2x1ZGUgc2NyZWVuLXR5cGUodGFibGV0LWxhbmRzY2FwZSl7XG4gICAgICBtYXgtd2lkdGg6IDYwcmVtO1xuICAgICAgbWFyZ2luOiA0cmVtIGF1dG87XG4gICAgfVxuICAgIFxuICBcbiAgICAuZm9sZGVyIHtcbiAgXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICBtYXJnaW46IDJyZW0gMXJlbTtcbiAgXG4gICAgICAuZm9sZGVyX19pY29uIHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2UxNGIxNztcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogcmFkaWFsLWdyYWRpZW50KGNpcmNsZSBhdCB0b3AsICNlZmMxOGMgNSUsICNlMTRiMTcpO1xuICAgICAgICBoZWlnaHQ6IDUwcHg7XG4gICAgICAgIHdpZHRoOiAxMDBweDtcbiAgXG4gIFxuICAgICAgICAmOjphZnRlciB7XG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgIHRvcDogLTVweDtcbiAgICAgICAgICBsZWZ0OiAyLjVweDtcbiAgICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgICBoZWlnaHQ6IDVweDtcbiAgICAgICAgICB3aWR0aDogOTVweDtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiNmNGY0ZjQ7XG4gICAgICAgIH1cbiAgXG4gICAgICAgICY6OmJlZm9yZXtcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgdG9wOiAtOHB4O1xuICAgICAgICAgIGxlZnQ6IDIuNXB4O1xuICAgICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICAgIGhlaWdodDogNXB4O1xuICAgICAgICAgIHdpZHRoOiAyNXB4O1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDJweCAycHggMCAwO1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6I2Y0ZjRmNDtcbiAgICAgICAgfVxuICBcbiAgICAgIH1cbiAgXG4gICAgICAmX190aXRsZXtcbiAgICAgICAgbWFyZ2luOiAwLjVyZW0gYXV0bztcbiAgICAgICAgbWF4LXdpZHRoOiAxMDBweDtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgY29sb3I6ICNmNGY0ZjQ7XG4gICAgICB9XG4gICAgXG4gICAgfVxuICB9XG4gIC8vIEZPTERFUlMtVFJBWSBFTkQiLCJAaW1wb3J0ICcuL2ltcG9ydHMvbm9ybWFsaXplJztcbkBpbXBvcnQgJy4vZ2xvYmFsL2dlbmVyYWxfc3R5bGVzLnNjc3MnO1xuQGltcG9ydCAnLi9oZWxwZXJzL2JyZWFrcG9pbnRzJztcbkBpbXBvcnQgJy4vbGF5b3V0L3ByZWxvYWRlcic7XG5AaW1wb3J0ICcuL2xheW91dC90ZXJtaW5hbCc7XG5AaW1wb3J0ICcuL2xheW91dC9mb2xkZXJzJztcblxuXG4vKiBHRU5FUkFMIFNUWUxFUyBTVEFSVCAqL1xuKiwgXG4qOjpiZWZvcmUsXG4qOjphZnRlciB7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbn1cblxuXG5cblxuXG5cblxuXG4gIFxuICBcbiJdfQ== */
